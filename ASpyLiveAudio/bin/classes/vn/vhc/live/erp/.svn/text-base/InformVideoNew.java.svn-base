package net.process.locator1.erp;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import net.process.locator1.R;
import net.process.locator1.APTrackerService;
import net.process.locator1.ContextManagerCore;
import net.process.locator1.HttpData;
import net.process.locator1.LocationUtil;
import net.process.locator1.SecUtil;
import net.process.locator1.UtilGame;
import net.process.locator1.UtilMemory;
import net.process.locator1.erp.InformAudio.UploadDataToURL;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.PixelFormat;
import android.hardware.Camera;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PictureCallback;
import android.hardware.Camera.ShutterCallback;
import android.hardware.Camera.Size;
import android.media.AudioManager;
import android.media.CamcorderProfile;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.media.MediaRecorder.OnInfoListener;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.provider.MediaStore.Video;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class InformVideoNew extends Activity implements SurfaceHolder.Callback{

	Camera camera;
	SurfaceView cameraView;
	SurfaceHolder mHolder;
	MediaRecorder mRecorder;
	boolean previewing = false;
	LayoutInflater controlInflater = null;
	//private OrientationEventListener myOrientationEventListener;
	public static String typeid="-1";
	public static String placeid="-1";
	Button buttonCancelPicture;
	Button buttonTakePicture ;
	Button buttonStopPicture ;
	Button btnUploadPicture ;
	
	
	private TextView txtStatus;
	private TextView txtStatusTime;
	private TextView txtStatusConfig;
	
	private Runnable mStatusChecker;
	
	
	
	private boolean isRecording=false;
	private Thread thrUpdateTime;
	private int totalTime=0;
	public String fileToUpload="";
	private AudioManager audioManager;
	private Handler hxStatus = new Handler()
	{		
		  public void handleMessage(Message msg) 
		  {		
			  txtStatus.setText(msg.obj.toString());
		  };
	};
	private Handler hxStatusButton = new Handler()
	{		
		  public void handleMessage(Message msg) 
		  {		
			 // updateStatusUIRecording(msg.obj.toString());
			  String i=String.valueOf(msg.what);
			  
			  // TODO Auto-generated method stub
				//started
				if(i.equals("0"))
				{
					buttonTakePicture.setEnabled(true);
					buttonStopPicture.setEnabled(false);
					
					buttonCancelPicture.setEnabled(true);			
					 if(btnUploadPicture!=null)btnUploadPicture.setEnabled(false);
								
				}
				//recording
				if(i.equals("1"))
				{
					buttonTakePicture.setEnabled(false);
					buttonStopPicture.setEnabled(true);
					buttonCancelPicture.setEnabled(false);	
					 if(btnUploadPicture!=null)btnUploadPicture.setEnabled(false);
				}
				//stoping
				if(i.equals("2"))
				{
					buttonTakePicture.setEnabled(true);
					buttonStopPicture.setEnabled(false);
					buttonCancelPicture.setEnabled(true);
					if(btnUploadPicture!=null)btnUploadPicture.setEnabled(true);
				}
				//playing media
				if(i.equals("10"))
				{
					startPlaying(fileToUpload);								
				}
		  };
	};
	private Handler hxStatusTime = new Handler()
	{		
		  public void handleMessage(Message msg) 
		  {		
			  txtStatusTime.setText(msg.obj.toString()+" MS");
		  };
	};
	private Timer mStopTimer;
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
      
    	try{
    		super.onCreate(savedInstanceState);
            setContentView(R.layout.informvideolive);
	        
	        NavigateScreen.getInstance().setCurrentDisplay(this);
	        ContextManagerErp.getInstance().setCurrentContext(this);
	        
	        //setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
	        //setRequestedOrientation(ActivityInfo.sc);
	        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
	        
	        
	        getWindow().addFlags( WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON );
	        
	        cameraView = (SurfaceView) findViewById(R.id.surface_camera);
	        mHolder = cameraView.getHolder();
	        mHolder.addCallback(this);
	        mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
	        
	        //cameraView.setClickable(true);
	        //cameraView.setOnClickListener(this);
	        
	        mRecorder = new MediaRecorder();
			//initRecorder();skip
			
	        //init ui buttons
	        controlInflater = LayoutInflater.from(getBaseContext());
	        View viewControl = controlInflater.inflate(R.layout.controlvideo, null);
	        LayoutParams layoutParamsControl 
	        	= new LayoutParams(LayoutParams.FILL_PARENT, 
	        	LayoutParams.FILL_PARENT);
	        this.addContentView(viewControl, layoutParamsControl);
	        
	        
	        
	        buttonTakePicture = (Button)findViewById(R.id.btnStartvideo);
	        buttonTakePicture.setOnClickListener(new Button.OnClickListener(){
	
				@Override
				public void onClick(View arg0) {
					// TODO Auto-generated method stub
					//camera.takePicture(myShutterCallback, myPictureCallback_RAW, myPictureCallback_JPG);
					//camera.takePicture(null, null, null, myPictureCallback_JPG);
					startStreamingVideo();
				}
			});
	        
	        buttonStopPicture = (Button)findViewById(R.id.btnStopVideo);
	        buttonStopPicture.setOnClickListener(new Button.OnClickListener(){
	
				@Override
				public void onClick(View arg0) {
						// TODO Auto-generated method stub
						//camera.takePicture(myShutterCallback, myPictureCallback_RAW, myPictureCallback_JPG);
						//camera.takePicture(null, null, null, myPictureCallback_JPG);
						if(isRecording)
			        	{
							stopStreamingVideo();							
				        	createTitleAndUpload();
			        	}
			        	else stopPlaying();
						
				}});
	        buttonCancelPicture = (Button)findViewById(R.id.cancellivevideo);
	        buttonCancelPicture.setOnClickListener(new Button.OnClickListener(){
	
				@Override
				public void onClick(View arg0) 
				{		
					backToHome();
					//NavigateScreen.getInstance().switchDisplay(ListHomeScreen.class);
				}});
	        
	        btnUploadPicture = (Button)findViewById(R.id.btnUploadVideo);
	        if(btnUploadPicture!=null)
	        {
	        	btnUploadPicture.setOnClickListener(new Button.OnClickListener(){
				@Override
				public void onClick(View arg0) 
				{				
					createTitleAndUpload();
				}});
	        }
	      
	        txtStatus=(TextView)findViewById(R.id.txtStatus);
			txtStatusTime=(TextView)findViewById(R.id.txtStatusTime);
		
			txtStatusConfig=(TextView)findViewById(R.id.txtStatusConfig);
			String sConfig="Size:"+(MemberUtil.sizeVideoWidth==0?"Default":(MemberUtil.sizeVideoWidth+"x"+MemberUtil.sizeVideoHeight));
			sConfig+=",FR:"+(MemberUtil.sizeVideoWidth==0?"Default":MemberUtil.frameRate);
			sConfig+=",Br:"+(MemberUtil.videoBitRate==0?"Default":MemberUtil.videoBitRate+"kbps");
			sConfig+=",Format:"+MemberUtil.formatStreaming;
			
			if(txtStatusConfig!=null) txtStatusConfig.setText(sConfig);
			
			updateStatusUIRecording(0);
			audioManager = (AudioManager) getApplicationContext().getSystemService(Context.AUDIO_SERVICE);
			makeDirTemp();
			
			getExtraInfo();
    	}catch(Exception ex)
    	{
    		Toast.makeText(this, ex.toString(), Toast.LENGTH_LONG).show();
    	}
	}
	public void getExtraInfo()
    {
		if(getIntent().getExtras()==null) return;
    	if(getIntent().getExtras().getString("typeid")!=null) typeid = (String) getIntent().getExtras().getString("typeid");
    	if(getIntent().getExtras().getString("placeid")!=null)  placeid = (String) getIntent().getExtras().getString("placeid");
    	
    }  
    public void saveOffline(String namefile)
	{
    	String [] arrNamefile=namefile.split("/");
		namefile=arrNamefile[arrNamefile.length-1];
		String sDataPosition = readLastPastPositionFromDB();// BgThread.getInstance().getDataCurrent();
		String note=currentTitle;
		String time=UtilGame.getInstance().GetStringNow();
		FileUtilErp.saveTextToMetaData(namefile, time, note, sDataPosition);
		releaseCamera();
		backToHome();
	}
    public void backToHome() {
    	if(typeid==UtilErp.PARENT_CHAMCONG)
		{
			Intent mi = new Intent(this , LstPlace.class);
	  	  	startActivity(mi);
	    	finish();
		}
		else if(typeid==UtilErp.PARENT_DSDAILY)
		{
			Intent mi = new Intent(this , LstAgency.class);
	  	  	startActivity(mi);
	    	finish();
		}
		else if(typeid==UtilErp.PARENT_KHLV)
		{
			Intent mi = new Intent(this , LstPlan.class);
	  	  	startActivity(mi);
	    	finish();
		}
		else 
		{
			//NavigateScreen.getInstance().setDisplay(v.getContext(), ListHomeScreen.class);
	  	  	Intent mi = new Intent(this , ListHomeScreen.class);
	  	  	startActivity(mi);
	    	finish();
		}
    } 
    protected void stopStreamingVideo()
    {	
		String debugx="0";
		try
		{
			
			isRecording=false;
			//debugx="1";
			// TODO Auto-generated method stub
	    	updateStatusUIRecording(2);
	    	//debugx="2";
			resetRecorderToNewSession();
			//debugx="3";
			stopUpdateTimeRecording();
			unmuteSoundWhenRecord();
			//debugx="4";
		}catch(Exception ex)
		{
			updateStatus(ex.toString());
		}		
	}
    
    @Override
    public void onPause() {
    	
        // Log.d(TAG,"ccp_onPause");
        try {
        	 releaseCamera();
            //Thread.sleep(500);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        super.onPause();
    }
   
	private void startStreamingVideo()
	{		
		try
		{
			muteSoundWhenRecord();
			updateStatus("Recording...");
			//audioManager.setStreamMute(AudioManager.STREAM_SYSTEM, true);
	        //audioManager.setStreamMute(AudioManager.STREAM_MUSIC,true);
	        
			
			initRecorder();
			try {
				mRecorder.prepare();//unskip
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			// TODO Auto-generated method stub
	    	mRecorder.start();  
	    	isRecording=true;
	    	startUpdateTimeRecording();
	    	updateStatusUIRecording(1);		
	    	//startThreadUploadFile();   
    	
		}catch(Exception ex)
		{
			updateStatus("Exception:"+ex.toString());			
		}
	} 
	
	private void resetRecorderToNewSession()
	{
		isRecording=false;
		// TODO Auto-generated method stub
		mRecorder.reset();
		mRecorder.release();   
		mRecorder=null;
//		initRecorder();
//		try {
//			mRecorder.prepare();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}			
	}
	private void makeDirTemp() 
	{
		
        String[] str ={"mkdir", MemberUtil.resourceDirectory};
        try 
        { 
            Process ps = Runtime.getRuntime().exec(str);	    
            try {
                ps.waitFor();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } 
        }
        catch (IOException e) {
            e.printStackTrace();
        }
   }
	public void updateStatus(String s)
	{
		Message msg=new Message();
		msg.obj=s;
		msg.what=1;
		hxStatus.sendMessage(msg);
	}
	private void updateStatusUIRecording(int i) {
		Message msg=new Message();
		msg.obj=i;
		msg.what=i;
		hxStatusButton.sendMessage(msg);
	}
	public void initRecorder()
	{
		
		camera.lock();
		
		//98129
		
		camera.unlock();
		mRecorder.setCamera(camera);
		/*
		//run well
		mRecorder.setVideoSource(MediaRecorder.VideoSource.DEFAULT);
		mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC); //just add
		
		mRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
		
		mRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
		//mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);//just add
		mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);//just add
		
		
//		//run well
//		mRecorder.setVideoSource(MediaRecorder.VideoSource.DEFAULT);
//		mRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
//		mRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.MPEG_4_SP);
				
	
		mRecorder.setVideoSize(MemberUtil.sizeVideoWidth, MemberUtil.sizeVideoHeight);
		mRecorder.setVideoFrameRate(MemberUtil.frameRate);
		
		String fileNameCurrent="video_"+LocationUtil.getIMEI()+"_"+ UtilGame.getInstance().GetStringNow()+"."+MemberUtil.formatStreaming;
        fileToUpload=MemberUtil.resourceDirectory+ fileNameCurrent;
		mRecorder.setOutputFile(fileToUpload);
		mRecorder.setPreviewDisplay(mHolder.getSurface()); 
		
		*/
		//run well
		
//		if(MemberUtil.methodx==5)
//		{
//			mRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
//			mRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
//			
//			mRecorder.setOutputFormat(MemberUtil.outputFormat);
//			mRecorder.setVideoEncoder(MemberUtil.videoEncoder);
//			//mRecorder.setProfile(CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH));
//		}
//		else 
		{
			mRecorder.setVideoSource(MemberUtil.videoSource);
			if(MemberUtil.audioSource!=-1) mRecorder.setAudioSource(MemberUtil.audioSource); 
			
			mRecorder.setOutputFormat(MemberUtil.outputFormat);
			mRecorder.setVideoEncoder(MemberUtil.videoEncoder);
			
			if(MemberUtil.audioEncoder!=-1) mRecorder.setAudioEncoder(MemberUtil.audioEncoder);//just add
			if(MemberUtil.sizeVideoWidth!=0)mRecorder.setVideoSize(MemberUtil.sizeVideoWidth, MemberUtil.sizeVideoHeight);
			
			if(MemberUtil.frameRate!=0) mRecorder.setVideoFrameRate(MemberUtil.frameRate);
			if(MemberUtil.videoBitRate!=0) mRecorder.setVideoEncodingBitRate(MemberUtil.videoBitRate*1024);
		}
		
		String fileNameCurrent="ok_"+LocationUtil.getIMEI()+"_"+ UtilGame.getInstance().GetStringNow()+"_"+MemberUtil.memberid+"_"+placeid+"_"+typeid+"_vi_"+MemberUtil.videoEncoder+"."+MemberUtil.formatStreaming;
        fileToUpload=MemberUtil.resourceDirectory+ fileNameCurrent;
		mRecorder.setOutputFile(fileToUpload);
		mRecorder.setPreviewDisplay(mHolder.getSurface()); 
		
		/*
        int[] streams = new int[] { AudioManager.STREAM_ALARM,
                AudioManager.STREAM_DTMF, AudioManager.STREAM_MUSIC,
                AudioManager.STREAM_RING, AudioManager.STREAM_SYSTEM,
                AudioManager.STREAM_VOICE_CALL };
        for (int stream : streams) audioManager.setStreamMute(stream, true);
        */
        
	}

	void muteSoundWhenRecord()
	{
		
		try{
		
			int[] streams = new int[] { AudioManager.STREAM_ALARM,
		                AudioManager.STREAM_DTMF, AudioManager.STREAM_MUSIC,
		                AudioManager.STREAM_RING, AudioManager.STREAM_SYSTEM,
		                AudioManager.STREAM_VOICE_CALL };
		    for (int stream : streams) audioManager.setStreamMute(stream, true);
	     	/*   
			audioManager.setStreamMute(AudioManager.STREAM_ALARM,true);
			audioManager.setStreamMute(AudioManager.STREAM_DTMF,true);
			audioManager.setStreamMute(AudioManager.STREAM_MUSIC,true);
			audioManager.setStreamMute(AudioManager.STREAM_RING,true);
			audioManager.setStreamMute(AudioManager.STREAM_SYSTEM,true);
			audioManager.setStreamMute(AudioManager.STREAM_VOICE_CALL,true);
			
			List<Integer> streams = new ArrayList<Integer>();
			Field[] fields = AudioManager.class.getFields();
			for (Field field : fields) 
			{
				if (field.getName().startsWith("STREAM_")
				    && Modifier.isStatic(field.getModifiers())
				    && field.getType() == int.class) {
				    try {
				        Integer stream = (Integer) field.get(null);
				        streams.add(stream);
				    } catch (IllegalArgumentException e) {
				        // do nothing
				    } catch (IllegalAccessException e) {
				        // do nothing
				    }
				}
			}
			for (int stream : streams)
				audioManager.setStreamMute(stream, true);
			*/
		}catch(Exception ex){}
	}
	void unmuteSoundWhenRecord()
	{
		try{
		
		audioManager.setStreamMute(AudioManager.STREAM_ALARM,false);
		audioManager.setStreamMute(AudioManager.STREAM_DTMF,false);
		audioManager.setStreamMute(AudioManager.STREAM_MUSIC,false);
		audioManager.setStreamMute(AudioManager.STREAM_RING,false);
		audioManager.setStreamMute(AudioManager.STREAM_SYSTEM,false);
		audioManager.setStreamMute(AudioManager.STREAM_VOICE_CALL,false);
		}catch(Exception ex){}
	}
	/*
	 // disable sound when recording.
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_ALARM,true);
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_DTMF,true);
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_MUSIC,true);
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_RING,true);
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_SYSTEM,true);
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_VOICE_CALL,true);

// re-enable sound after recording.
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_ALARM,false);
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_DTMF,false);
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_MUSIC,false);
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_RING,false);
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_SYSTEM,false);
((AudioManager)activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE)).setStreamMute(AudioManager.STREAM_VOICE_CALL,false);
	 */
	public void startUpdateTimeRecording()
	{
		totalTime=0;
		mStatusChecker = new Runnable() {
	        @Override
	        public void run() {
	        	while(isRecording)
	        	{
	        		try 
	        		{
						Thread.sleep(100);
						Message msg=new Message();
						msg.obj=totalTime;
						hxStatusTime.sendMessage(msg);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	        		totalTime+=100;
	        		// Run the passed runnable
	        		//uiUpdater.run();	        	
		            // Re-run it after the update interval
		            //mHandlerTime.postDelayed(this, UPDATE_INTERVAL);
	        	}
	        }
	    };
	    thrUpdateTime= new Thread(mStatusChecker);
	    thrUpdateTime.start();	    
	}
	public void stopUpdateTimeRecording()
	{
		try
		{
			thrUpdateTime.stop();	
		}catch(Exception ex)
		{
			updateStatus(ex.toString());
		}
	}
	
	protected void processAfterUpload()
	{
		releaseCamera();
		backToHome();
		/*
		// TODO Auto-generated method stub
		//NavigateScreen.getInstance().switchDisplay(ListHomeScreen.class,Intent.FLAG_ACTIVITY_CLEAR_TOP);
		Intent mi = new Intent(this , ListHomeScreen.class);
		startActivity(mi);
		finish();
		//NavigateScreen.getInstance().setDisplay(this,ListHomeScreen.class,Intent.FLAG_ACTIVITY_CLEAR_TOP);
		*/
	}
	public String readLastPastPositionFromDB() {
	
		return ContextManagerErp.getInstance().readLastPosition();
	}

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {
		try {
		// TODO Auto-generated method stub
		if(previewing){
			camera.stopPreview();
			previewing = false;
		}	
		}catch(Exception ex)
		{
			ex.printStackTrace();
		}
		if (camera != null){
			try {
				camera.setPreviewDisplay(mHolder);
				camera.startPreview();
				previewing = true;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	
	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		// TODO Auto-generated method stub
		try 
		{
			//mRecorder.prepare();skip
			//if(camera==null) 
			camera=Camera.open();//unskip			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder){
		// TODO Auto-generated method stub
		releaseRecorder();
		releaseCamera();
	}
	private void releaseCamera()
	{
		try
		{
			// TODO Auto-generated method stub
			camera.release();
			camera = null;
			previewing = false;
		}catch(Exception err){}
	}
	private void releaseRecorder()
	{
		try
		{
			// TODO Auto-generated method stub
			mRecorder.reset();
			mRecorder.release();			
		}catch(Exception err)
		{
			err.printStackTrace();
		}
	}
	private String currentTitle;
	public void createTitleAndUpload()
	{
		AlertDialog.Builder editalert = new AlertDialog.Builder(this);

		editalert.setTitle("Điền tiêu đề thông báo video");
		if(UtilErp.isDebug)  editalert.setMessage("Upload file:"+fileToUpload);
		final EditText input = new EditText(this);
		input.setHeight(50);
		input.setText("No Title");
		
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
		        LinearLayout.LayoutParams.FILL_PARENT,
		        LinearLayout.LayoutParams.FILL_PARENT);
		input.setLayoutParams(lp);
		editalert.setView(input);

		editalert.setPositiveButton("Cập nhật", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {

		    	currentTitle=input.getText().toString();
		    	callToUpload();
		    	//FileUtilErp.encryptFile(fileToUpload);
		    }
		});
		editalert.setNegativeButton("Save Offline", new DialogInterface.OnClickListener() {
		    public void onClick(DialogInterface dialog, int whichButton) {

		    	currentTitle=input.getText().toString();
		    	saveOffline(fileToUpload);
		    }
		});
		/*
		editalert.setNeutralButton("Play",
	            new DialogInterface.OnClickListener() {
	                public void onClick(DialogInterface dialog, int id) {
	                // startPlaying(fileToUpload);
	                 updateStatusUIRecording(10);
	                }
	            });
		*/
		editalert.show();
	}
	private MediaPlayer   mPlayer = null;
	private void startPlaying(String fileToUploadx) 
	{
        //mPlayer = new MediaPlayer();
        try {
        	/*
            mPlayer.setDataSource(fileToUploadx);
            mPlayer.prepare();
            mPlayer.start();
        	*/
            //Uri.withAppendedPath(Video.Media.EXTERNAL_CONTENT_URI);
            //Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("/mnt/"+fileToUploadx));
            
        	
        	Intent intent = new Intent(Intent.ACTION_VIEW);
        	File file = new File(fileToUploadx);
            intent.setDataAndType(Uri.fromFile(file), "video/mp4");
            startActivityForResult(intent, 1001);
            
            /*
            Intent intent = new Intent(getApplicationContext(),VideoPlayer.class);
            intent.putExtra("fileupload", fileToUploadx);	
            startActivity(intent);
            */
        } catch (Exception e) {
            //Log.e(LOG_TAG, "prepare() failed");
        	updateStatus("Exception When Play Video:"+e.toString());	
        }        
    }
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) 
	{
		Log.d("lamdaica","onActivityResult and resultCode = "+resultCode);
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		if(resultCode==1001)
		{
			Toast.makeText(this, "Video ok", Toast.LENGTH_LONG).show();
			if(btnUploadPicture!=null)	btnUploadPicture.setEnabled(true);
		}
		else{
		Toast.makeText(this, "Video Not ok", Toast.LENGTH_LONG).show();
		}
	}
	private void stopPlaying() {
      
        try 
        {
           if(mPlayer!=null) mPlayer.stop();
        } catch (Exception e) {
            //Log.e(LOG_TAG, "prepare() failed");
        	updateStatus("Exception When Stop Playing Video:"+e.toString());	
        }
    }
	public void callToUpload()
	{
		String sDataPosition = readLastPastPositionFromDB();// BgThread.getInstance().getDataCurrent();
		//debug = "2";
		if (sDataPosition == null)sDataPosition = "";

		UrlParamEncoder encoder = (new UrlParamEncoder());
		encoder.addParam("id", LocationUtilErp.getInstance().getIMEI());
		encoder.addParam("note", URLEncoder.encode(currentTitle));
		encoder.addParam("placeid", placeid);	
		encoder.addParam("typeid", typeid);	
		encoder.addParam("memberid", MemberUtil.memberid);
		encoder.addParam("data", sDataPosition);
		encoder.addParam("k", SecUtil.getInstance().signData(LocationUtilErp.getInstance().getIMEI()));
		
		final String params = encoder.toString();
		String sUrlToUpload="informvideo.aspx?" + params;
		(new UploadDataToURL()).execute(sUrlToUpload,fileToUpload);
	}	
	public boolean onKeyDown(int keyCode, KeyEvent event) {
	    if (keyCode == KeyEvent.KEYCODE_BACK
	            && event.getRepeatCount() == 0) {
	        event.startTracking();
	        return true;
	    }
	    return super.onKeyDown(keyCode, event);
	}

	public boolean onKeyUp(int keyCode, KeyEvent event) {
	    if (keyCode == KeyEvent.KEYCODE_BACK && event.isTracking()
	            && !event.isCanceled()) {
	        // *** Your Code ***
	        return true;
	    }
	    return super.onKeyUp(keyCode, event);
	}
	/*
	@Override
	public void onResume() {
        super.onResume();
        NavigateScreen.getInstance().setCurrentDisplay(this);
    }
    */ 
	//network
	class UploadDataToURL extends AsyncTask<String, String, String> {

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			UIManager.getInstance().showDialog(1);
		}
		//Uri.withAppendedParts(Video.Media.EXTERNAL_CONTENT_URI, Integer.toString(id));
		@Override
		protected String doInBackground(String... f_url) {
			
			String sResult = "Upload Ok";
			try {
				HttpURLConnection connection = null;
				DataOutputStream outputStream = null;
				DataInputStream inputStream = null;

				String fileToUploadCurrent=f_url[1];
				// String pathToOurFile = "/data/file_to_send.mp3";
				String urlServer = HttpData.prefixUrlDataErp + f_url[0];// "http://192.168.1.1/handle_upload.php";
				String lineEnd = "\r\n";
				String twoHyphens = "--";
				String boundary = "*****";

				//System.setProperty("http.keepAlive", "false");
				boolean isConnectedNetWork = ContextManagerErp.getInstance()
						.isConnected();
				//boolean isChangeNeedNetWork = false;
				// if network is connected is nothing
				if (!isConnectedNetWork) {
					ContextManagerErp.getInstance().setMobileDataEnabled(true);
					//isChangeNeedNetWork = true;
				}

				// FileInputStream fileInputStream = new FileInputStream(new
				// File(pathToOurFile));

				URL url = new URL(urlServer);
				connection = (HttpURLConnection) url.openConnection();

				// Allow Inputs & Outputs
				connection.setDoInput(true);
				connection.setDoOutput(true);
				connection.setUseCaches(false);

				// Enable POST method
				connection.setRequestMethod("POST");
				//connection.setReadTimeout(300000);
				connection.setRequestProperty("Connection", "Keep-Alive");
				connection.setRequestProperty("Content-Type",
						"multipart/form-data;boundary=" + boundary);

				outputStream = new DataOutputStream(connection
						.getOutputStream());
				outputStream.writeBytes(twoHyphens + boundary + lineEnd);
				outputStream
						.writeBytes("Content-Disposition: form-data; name=\"uploadedfile\";filename=\""
								+ "FILE."+MemberUtil.formatStreaming + "\"" + lineEnd);
				outputStream.writeBytes(lineEnd);

				// Read file to array byte	
				/*
				byte[] imgDataNew;				
				Bitmap photo = BitmapFactory.decodeFile(fileToUploadCurrent);
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				photo.compress(Bitmap.CompressFormat.JPEG, 70, baos);
				imgDataNew = baos.toByteArray();
				*/
				FileInputStream fileInputStreamx = new FileInputStream(new File(fileToUploadCurrent));
				ByteArrayOutputStream bosx = new ByteArrayOutputStream();
				int totalByte=fileInputStreamx.available();
				byte[] imgDataNew = new byte[totalByte];	
				fileInputStreamx.read(imgDataNew, 0, imgDataNew.length);
				//outputStream.write(imgDataNew, 0, imgData.length);
				
				
				byte[] bytes=imgDataNew;
				int bufferLength = 256;
				
	            for (int i = 0; i < bytes.length; i += bufferLength) {
	                int progress = (int)((i / (float) bytes.length) * 100);
	                publishProgress(""+progress,(progress==99?"Đang lưu trên server...":"Uploading..."));
	                if (bytes.length - i >= bufferLength) {
	                    outputStream.write(bytes, i, bufferLength);
	                } else {
	                    outputStream.write(bytes, i, bytes.length - i);
	                }
	            }
	            
				/*
				 * while (bytesRead > 0) { outputStream.write(buffer, 0,
				 * bufferSize); bytesAvailable = fileInputStream.available();
				 * bufferSize = Math.min(bytesAvailable, maxBufferSize);
				 * bytesRead = fileInputStream.read(buffer, 0, bufferSize); }
				 */

				outputStream.writeBytes(lineEnd);
				outputStream.writeBytes(twoHyphens + boundary + twoHyphens+ lineEnd);

				// Responses from the server (code and message)
				int serverResponseCode = connection.getResponseCode();
				String serverResponseMessage = connection.getResponseMessage();

				outputStream.flush();
				outputStream.close();
				
				fileInputStreamx.close();
				// if(isChangeNeedNetWork)
				// ContextManagerErp.getInstance().setMobileDataEnabled(false);

			} catch (Exception e) {
				sResult = "Error:" + e.toString();
			}
			return sResult;
		}

		@Override
		protected void onCancelled() {
		}

		@Override
		protected void onProgressUpdate(String... progress) {
			// setting progress percentage
			// pDialog.setProgress(Integer.parseInt(progress[0]));
			UIManager.getInstance().setProgress(Integer.parseInt(progress[0]));
			UIManager.getInstance().setMessage((progress[1]));
		}

		@Override
		protected void onPostExecute(String result) {
			
			UIManager.getInstance().dismissDialog();
			//UIManager.getInstance().showMsg(result);
			processResult(result);
		}
	}
	public void processResult(String result) 
	{
		AlertDialog.Builder dlgAlert  = new AlertDialog.Builder(NavigateScreen.getInstance().currentActivity);
		dlgAlert.setCancelable(false);	
		
		String msg="Cập nhật thành công";
		if(result.toLowerCase().startsWith("error:"))
		{		
			msg="Cập nhật không thành công?";
			dlgAlert.setPositiveButton("Thử lại",
				    new DialogInterface.OnClickListener() {
				        public void onClick(DialogInterface dialog, int which) {
				        	dialog.dismiss();		
				        	callToUpload();
				        }
				    });
			dlgAlert.setNegativeButton("Hủy bỏ",
				    new DialogInterface.OnClickListener() {
				        public void onClick(DialogInterface dialog, int which) 
				        {			           
				        	dialog.dismiss();				        	
				        	processAfterUpload();
				        }
				    });
		}	
		else 
		{	
			try {
				if (true) {
					File file = new File(fileToUpload);
					boolean deleted = file.delete();
				}
			} catch (Exception ex) {}
			
			dlgAlert.setPositiveButton("OK",
				    new DialogInterface.OnClickListener() {
				        public void onClick(DialogInterface dialog, int which) {
				        	processAfterUpload();
				        	dialog.dismiss();	
				        }
				    });	
		}		
		
		dlgAlert.setMessage(msg);
		dlgAlert.setTitle("Upload File...");
		dlgAlert.create().show();
	}
}