package net.process.locator1.erp;

import java.io.DataInputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import net.process.locator1.HttpData;
import net.process.locator1.R;
import net.process.locator1.erp.LstAgency.DownloadDataFromURL;
import net.process.locator1.erp.OrderHandTab.ViewHolder;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

public class OrderPendingTab extends Fragment {
	View convertView = null;
	Context mcontext;
	OrderAdapterHand processingOrderAdapter = null;
	public int isLoad = 0;
	String agencyid = "";
	String agencyfullname = "";
	LayoutInflater inflater;
	ListView plist;
	public ArrayList<Products> arrListOrder = new ArrayList<Products>();

	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		final ViewHolder holder;

		if (convertView == null) {
			holder = new ViewHolder();
			convertView = inflater.inflate(R.layout.order_hand_tab, container,
					false);
			holder.button = (Button) convertView
					.findViewById(R.id.btn_search_order_hand);
			holder.editext = (EditText) convertView
					.findViewById(R.id.edit_search_order_hand);
			holder.listView = (ListView) convertView
					.findViewById(R.id.list_order_hand);
			convertView.setTag(holder);

		} else {
			convertView = inflater.inflate(R.layout.order_hand_tab, container,
					false);
			holder = (ViewHolder) convertView.getTag();
		}
		if (true) {
			loadData(holder.listView, inflater);
		}
		mcontext=inflater.getContext();
		setupUI(holder);
		
		
		return convertView;
	}
	public void setupUI(final ViewHolder holder){
		NavigateScreen.getInstance().setCurrentDisplay(mcontext);
		holder.editext.addTextChangedListener(filterTextWatcherx);
		holder.button.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				isFromServer=true;
				loadJsonOrder();
				holder.editext.setText("");
			}
		});
		ContextManagerErp.getInstance().setCurrentContext(this.getActivity());
	}
	public void clearStore() {
		arrListOrder.clear();
		
	}

	public void setDataSource() {
		if (arrListOrder.size() < 0) {
			UIManager.getInstance().showMsg("Không có dữ liệu...");
			return;
		}

		processingOrderAdapter = new OrderAdapterHand(inflater.getContext(),
				R.layout.order_hand_main, arrListOrder, inflater);

		plist.setAdapter(processingOrderAdapter);
	}

	public void loadData(ListView plist, LayoutInflater inflater) {
		this.inflater = inflater;
		this.plist = plist;
		loadJsonOrder();

	}

	private TextWatcher filterTextWatcherx = new TextWatcher() {
		public void afterTextChanged(Editable s) {
			if (processingOrderAdapter != null) {
				processingOrderAdapter.getFilter().filter(s);
			}
		}

		public void beforeTextChanged(CharSequence s, int start, int count,
				int after) {
		}

		public void onTextChanged(CharSequence s, int start, int before,
				int count) {
			// adapter.getFilter().filter(s);

		}

	};

	public static boolean isFromServer = false;
	public static String sData = "";

	public void loadJsonOrder() {
		if (isFromServer) {
			UIManager.getInstance().showMsg("Loading From Server...");// tag 1

			(new DownloadDataFromURL()).execute("xorders.aspx", "memberid="
					+ MemberUtil.memberid + "&status=1", "1");
		} else {
			if (arrListOrder.size() > 0) {

				return;
			}
			if (sData.equalsIgnoreCase("")) {
				String sSaved = UtilErp.ReadFromFile("orderchuaxuly");
				if (sSaved.equalsIgnoreCase("")) {
					isFromServer = true;
					UIManager.getInstance().showMsg("Loading From Server...");

					(new DownloadDataFromURL()).execute("xorders.aspx",
							"memberid=" + MemberUtil.memberid + "&status=1", "1");
				} else {
					// tag 4

					UIManager.getInstance().showMsg("Loading From Phone...");
					processResult(sSaved, 1);
				}
			} else {
				// tag 5

				processResult(sData, 1);

			}
		}

	}

	private void processResult(String result, int typeidx2) {
		String str = result;

		if (isFromServer) {

			UtilErp.SaveToFile("orderchuaxuly", result);
			isFromServer = false;
		}
		String sString = str;
		JSONArray jSonArr;
		clearStore();
		try {
			jSonArr = new JSONArray(str);
			for (int jx = 0; jx < jSonArr.length(); jx++) {
				JSONObject jsonO = jSonArr.getJSONObject(jx);
				String sId = (String) jsonO.get("id");
				String sTime = (String) jsonO.get("time");
				String sTitle = (String) jsonO.get("kh");
				String sStt = jx + "";
				String sCode = (String) jsonO.get("code");
				JSONArray jSonArrUnit = (JSONArray) jsonO.get("pro");
				// Products product = new Products();
				ArrayList<Products> listProduct = new ArrayList<Products>();
				for (int j = 0; j < jSonArrUnit.length(); j++) {
					JSONObject jsonOu = jSonArrUnit.getJSONObject(j);
					Products prdouctList = new Products();
					prdouctList.ProductName = (String) jsonOu
							.getString("title");
					prdouctList.ProductNumber = (String) jsonOu.getString("sl");
					listProduct.add(prdouctList);
				}
				Products products = new Products(sTitle, sId, sTime, sCode,
						listProduct, sStt);
				arrListOrder.add(products);

			}
			setDataSource();// set data sourexe
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			// Toast.makeText(this, e.toString(), Toast.LENGTH_LONG).show();

			e.printStackTrace();
		}

	}

	//
	static class ViewHolder {
		EditText editext;
		ListView listView;
		Button button;
	}

	class DownloadDataFromURL extends AsyncTask<String, String, String> {
		int typeidx = -1;

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			UIManager.getInstance().showDialog(1);
		}

		@Override
		protected String doInBackground(String... f_url) {
			typeidx = Integer.parseInt(f_url[2]);
			// if(!sResultXXX.equals("") && typeidx==1) return sResultXXX;

			String sResult = "";
			try {

				// sResult = (new HttpData()).getData(f_url[0],f_url[1]);
				sResult = "";
				System.setProperty("http.keepAlive", "false");

				 String xurl = HttpData.prefixUrl + f_url[0] + "?" +
				 f_url[1]+UtilErp.GetCompressUrl();
				//String xurl = "http://erp.vhc.vn/m/products/getall.aspx?memberid=152721";
				//String xurl = "http://erp.vhc.vn/m/orders/getall.aspx?memberid=152721&dt=20131227&status=2";
				
				URL url = new URL(xurl);
				URLConnection conn = url.openConnection();
				int lenghtOfFile = conn.getContentLength();

				DataInputStream rd = new DataInputStream(conn.getInputStream());
				int count = 0;
				StringBuilder sb = new StringBuilder();
				byte[] buffer = new byte[512];
				int total = 0;
				while ((count = rd.read(buffer)) != -1) {
					total += count;
					int progress_temp = (int) total * 100 / lenghtOfFile;
					publishProgress("" + progress_temp);

					if (count < buffer.length) {
						byte[] bufferX = new byte[count];
						for (int jx = 0; jx <= bufferX.length - 1; jx++) {
							bufferX[jx] = buffer[jx];
						}
						sb.append(new String(bufferX, "UTF-8"));
					} else {
						sb.append(new String(buffer, "UTF-8"));
					}
				}
				sResult = sb.toString();

				rd = null;
				conn = null;
				url = null;

			} catch (Exception e) {
				// Log.e("Error: ", e.getMessage());
				sResult = "Error:" + e.toString();
			}

			return sResult;
		}

		@Override
		protected void onCancelled() {
		}

		@Override
		protected void onProgressUpdate(String... progress) {
			// setting progress percentage
			UIManager.getInstance().setProgress(Integer.parseInt(progress[0]));
		}

		@Override
		protected void onPostExecute(String result) {

			UIManager.getInstance().dismissDialog();
			processResult(result, typeidx);
		}
	}
	//
	//
}