package net.process.locator1.erp;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONObject;

import net.process.locator1.R;
import net.process.locator1.HttpData;

import android.app.ListActivity;
import android.content.Intent;

import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.ContextMenu;
import android.view.KeyEvent;
import android.view.MenuItem;
import android.view.View;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

public class LstPlace extends ListActivity {
	// public String[] DATATEXT = new String[] {"xxx"};
	// public String[] DATAVALUE = new String[] {"xxx"};

	public static DataUI[] DATASOURCE = new DataUI[] {};

	public static int currentPosition = 0;
	public static boolean isFromServer = false;
	public ArrayList<DataUI> DATASOURCEX = new ArrayList<DataUI>();
	private AgencyAdapter adapter = null;
	EditText editSearch;

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setTitle("Địa điểm chấm công");
		setContentView(R.layout.listviewtest);
		NavigateScreen.getInstance().setCurrentDisplay(this);
		ContextManagerErp.getInstance().setCurrentContext(this);
		editSearch = (EditText) findViewById(R.id.edit_Search_LstPlace);
		editSearch.addTextChangedListener(filterTextWatcher);
		// get data from server
		getPlaceFromServer(false);

	}

	// search
	
	private TextWatcher filterTextWatcher = new TextWatcher() {

		public void afterTextChanged(Editable s) {
			adapter.getFilter().filter(s);
			// strSearch = s.toString();
		}

		public void beforeTextChanged(CharSequence s, int start, int count,
				int after) {
		}

		public void onTextChanged(CharSequence s, int start, int before,
				int count) {
			// adapter.getFilter().filter(s);

		}

	};
	

	// registerForContextMenu(lv);
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);
		menu.setHeaderTitle("Lựa chọn");
		menu.add(0, 1, 0, "Thông báo ảnh");
		menu.add(0, 2, 0, "Lập đơn hàng");

		menu.add(0, 4, 0, "Thông báo Text");
		menu.add(0, 5, 0, "Thông báo Audio");
		menu.add(0, 6, 0, "Thông báo Video");
		menu.add(0, 7, 0, "Thông báo AudioLive");
		menu.add(0, 8, 0, "Thông báo VideoLive");

		menu.add(0, 9, 0, "Thoát");

	}

	public void function1(String id) {
		// LstCamera.placeid = (id);
		// LstCamera.typeid = UtilErp.PARENT_CHAMCONG;
		//
		// AndroidCamera.typeid = UtilErp.PARENT_CHAMCONG;
		// NavigateScreen.getInstance().switchDisplay(AndroidCamera.class);

		InformPictureNew.placeid = id;
		InformPictureNew.typeid = UtilErp.PARENT_CHAMCONG;

		Intent mi = new Intent(this, InformPictureNew.class);
		mi.putExtra("typeid", UtilErp.PARENT_CHAMCONG);
		mi.putExtra("placeid", id);
		startActivity(mi);
	}

	@Override
	public boolean onContextItemSelected(MenuItem item) {

		if (!AdapterView.AdapterContextMenuInfo.class.isInstance(item
				.getMenuInfo()))
			return false;

		AdapterView.AdapterContextMenuInfo cmi = (AdapterView.AdapterContextMenuInfo) item
				.getMenuInfo();

		Object o = getListView().getItemAtPosition(cmi.position);
		// Toast.makeText(getApplicationContext(),
		// "function 1 called:"+((DataUI)o).get_id(),
		// Toast.LENGTH_SHORT).show();
		String placeid = ((DataUI) o).get_id();
		Toast.makeText(getApplicationContext(),placeid,Toast.LENGTH_SHORT).show();
		if (item.getItemId() == 1) {
			function1(((DataUI) o).get_id());
		} else if (item.getItemId() == 2) {
			function2(((DataUI) o));
			// NavigateScreen.getInstance().GotoInform(placeid,
			// UtilErp.PARENT_CHAMCONG, "order");
		} else if (item.getItemId() == 4) {
			NavigateScreen.getInstance().GotoInform(placeid,
					UtilErp.PARENT_CHAMCONG, "text");
		} else if (item.getItemId() == 5) {
			NavigateScreen.getInstance().GotoInform(placeid,
					UtilErp.PARENT_CHAMCONG, "audio");
		} else if (item.getItemId() == 6) {
			NavigateScreen.getInstance().GotoInform(placeid,
					UtilErp.PARENT_CHAMCONG, "video");
		} else if (item.getItemId() == 7) {
			NavigateScreen.getInstance().GotoInform(placeid,
					UtilErp.PARENT_CHAMCONG, "audiolive");
		} else if (item.getItemId() == 8) {
			NavigateScreen.getInstance().GotoInform(placeid,
					UtilErp.PARENT_CHAMCONG, "videolive");
		} else {
			return false;
		}
		return true;
	}

	@Override
	public void onResume() {
		super.onResume();
		NavigateScreen.getInstance().setCurrentDisplay(this);
	}

	public void function2(DataUI o) {
		// // Toast.makeText(this, "function 2 called",
		// Toast.LENGTH_SHORT).show();
		// // Toast.makeText(getApplicationContext(),
		// // "function 1 called:"+LstCamera.placeid,
		// Toast.LENGTH_SHORT).show();
		// //NavigateScreen.getInstance().setDisplay(this,
		// ListHomeScreen.class);
		// backToHome();
		FrmOrder.agencyname = o.get_title();
		FrmOrder.agencyaddress = o.get_placeaddress();
		// NavigateScreen.getInstance().GotoInform(o.get_id(),
		// UtilErp.PARENT_DSDAILY, "order");
		NavigateScreen.getInstance().GotoInform(o.get_id(),
				UtilErp.PARENT_CHAMCONG, "order");
	}

	public void backToHome() {
		// NavigateScreen.getInstance().setDisplay(v.getContext(),
		// ListHomeScreen.class);
		Intent mi = new Intent(this, ListHomeScreen.class);
		startActivity(mi);
		finish();
	}

	private void getPlaceFromServer(boolean isForce) {
		isFromServer = isForce;
		if (!isForce) {
			String sData = ReadFromFile("/tmpb/places.txt");
			// ko co thi xu ly offline
			if (sData.equalsIgnoreCase("")) {
				getPlaceFromServer(true);
				return;
			}
			processResult(sData);
			// if(DATASOURCE.length>0){showUI();return;}
			// if(DATASOURCE.length==0){showUIHome();}
		} else {
			new DownloadDataFromURL().execute("places.aspx", "memberid="
					+ MemberUtil.memberid);
		}
		// startShowProgress();
		// String sString=(new HttpData()).getData("places.aspx",
		// "memberid="+MemberUtil.memberid);
		// processResult(sString);
	}

	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {
			event.startTracking();
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

	public boolean onKeyUp(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK && event.isTracking()
				&& !event.isCanceled()) {
			// *** Your Code ***
			return true;
		}
		return super.onKeyUp(keyCode, event);
	}

	private void showUI() {
		// setListAdapter(new ArrayAdapter<DataUI>(this,
		// android.R.layout.simple_list_item_1, DATASOURCE));
		// setContentView(R.layout.listviewtest);
		adapter = new AgencyAdapter(this, R.layout.listplace, DATASOURCEX);
		setListAdapter(adapter);
		ListView lv = getListView();

		registerForContextMenu(lv);

		lv.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {

				currentPosition = position;
			}
		});
		showUIHome();
	}

	private void showUIHome() {
		Button closeButton = (Button) findViewById(R.id.btnExit);
		// closeButton.setText("Home");
		closeButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				// NavigateScreen.getInstance().switchDisplay(ListHomeScreen.class,Intent.FLAG_ACTIVITY_CLEAR_TOP);
				backToHome();
			}
		});

		Button updateButton = (Button) findViewById(R.id.btnUpdate);
		// closeButton.setText("Home");
		updateButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				// NavigateScreen.getInstance().switchDisplay(ListHomeScreen.class,Intent.FLAG_ACTIVITY_CLEAR_TOP);
				getPlaceFromServer(true);
			}
		});
	}

	private void processResult(String sString) {

		try {
			if (isFromServer) {
				SaveToFile("", sString);
				isFromServer = false;
			}

			JSONArray jSonArr;
			jSonArr = new JSONArray(sString);
			// DATATEXT= new String[jSonArr.length()];
			DATASOURCE = new DataUI[jSonArr.length()];
			DATASOURCEX = new ArrayList<DataUI>();
			for (int jx = 0; jx <= jSonArr.length() - 1; jx++) {

				JSONObject jsonO = jSonArr.getJSONObject(jx);
				String sID = (String) jsonO.get("id");
				String sTitle = (String) jsonO.get("title");
				DataUI oData = (new DataUI(sID, sTitle));
				oData.set_titleToCompare(UtilErp.TrimVietnameseMark(sTitle));
				DATASOURCE[jx] = (new DataUI(sID, sTitle));
				DATASOURCEX.add(oData);
			}
			// isstop=true;
			showUI();
			// setListAdapter(new ArrayAdapter<String>(this, R.layout.listplace,
			// DATATEXT));

		} catch (Exception e) {
			// TODO Auto-generated catch block
			UIManager.getInstance().showMsg("Error:" + e.toString());
		}
	}

	class DownloadDataFromURL extends AsyncTask<String, String, String> {

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			UIManager.getInstance().showDialog(1);
		}

		@Override
		protected String doInBackground(String... f_url) {
			int count;
			String sResult = "";
			try {

				// sResult = (new HttpData()).getData(f_url[0],f_url[1]);
				sResult = "";
				System.setProperty("http.keepAlive", "false");
				String xurl = HttpData.prefixUrl + f_url[0] + "?" + f_url[1]
						+ UtilErp.GetCompressUrl();

				URL url = new URL(xurl);
				URLConnection conn = url.openConnection();
				conn.setConnectTimeout(10000);
				int lenghtOfFile = conn.getContentLength();

				// Get the response
				DataInputStream rd = (new DataInputStream(conn.getInputStream()));
				StringBuilder sb = new StringBuilder();
				byte[] buffer = new byte[512];
				int total = 0;
				while ((count = rd.read(buffer)) != -1) {
					total += count;
					int progress_temp = (int) total * 100 / lenghtOfFile;
					publishProgress("" + progress_temp);
					// sb.append(new String(buffer, "UTF-8"));

					if (count < buffer.length) {
						byte[] bufferX = new byte[count];
						for (int jx = 0; jx <= bufferX.length - 1; jx++) {
							bufferX[jx] = buffer[jx];
						}
						sb.append(new String(bufferX, "UTF-8"));
					} else {
						sb.append(new String(buffer, "UTF-8"));
					}
				}
				sResult = sb.toString();

				rd = null;
				conn = null;
				url = null;
			} catch (Exception e) {
				// Log.e("Error: ", e.getMessage());
				sResult = "Error:" + e.toString();
			}
			return sResult;
		}

		@Override
		protected void onCancelled() {
		}

		@Override
		protected void onProgressUpdate(String... progress) {
			// setting progress percentage
			// pDialog.setProgress(Integer.parseInt(progress[0]));
			UIManager.getInstance().setProgress(Integer.parseInt(progress[0]));
		}

		@Override
		protected void onPostExecute(String result) {
			result = UtilErp.decompress(result);
			processResult(result);
			UIManager.getInstance().dismissDialog();
		}
	}

	public void SaveToFile(String filename, String string) {
		try {
			if (string.equals(""))
				return;
			if (string.toLowerCase().startsWith("error:"))
				return;
			File myFile = new File("/sdcard/tmpb/place.txt");
			// if( myFile.exists()) myFile.delete();
			// myFile.createNewFile();
			FileOutputStream fOut = new FileOutputStream(myFile, false);
			Writer myWriter = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(myFile), "UTF-8"));

			// Writer myWriter= new BufferedWriter(fOut,
			// OutputStreamWriter myOutWriter = new OutputStreamWriter(fOut);
			myWriter.append(string);
			myWriter.close();
			fOut.close();
			// Toast.makeText(getBaseContext(),
			// "Done writing SD 'mysdfile.txt'",Toast.LENGTH_SHORT).show();
		} catch (Exception e) {
			Toast.makeText(getApplicationContext(),
					"Exception when SaveToFile:" + e.toString(),
					Toast.LENGTH_LONG).show();
			// e.printStackTrace();
		}
	}

	public String ReadFromFile(String filename) {
		// if(1==1) return "";
		try {
			File myFile = new File("/sdcard/tmpb/place.txt");
			if (!myFile.exists())
				return "";
			Reader myReader = new BufferedReader(new InputStreamReader(
					new FileInputStream(myFile), "UTF-8"));

			StringBuilder fileContent = new StringBuilder();
			int c;
			while ((c = myReader.read()) != -1) {
				fileContent.append((char) c);

			}
			myReader.close();
			/*
			 * FileInputStream fis = new FileInputStream(myFile); int c;
			 * StringBuilder fileContent = new StringBuilder();
			 * 
			 * while((c=fis.read())!=-1) { fileContent.append((char)c);
			 * 
			 * } fis.close();
			 */
			return fileContent.toString();
		} catch (Exception e) {
			Toast.makeText(getApplicationContext(),
					"Exception when ReadFromFile:" + e.toString(),
					Toast.LENGTH_LONG).show();
			return "";
		}
	}

}
