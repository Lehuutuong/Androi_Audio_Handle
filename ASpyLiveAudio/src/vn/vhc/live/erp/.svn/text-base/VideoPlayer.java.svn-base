package net.process.locator1.erp;

import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import net.process.locator1.R;
import net.process.locator1.HttpData;
import net.process.locator1.LocationUtil;
import net.process.locator1.SecUtil;
import net.process.locator1.erp.InformVideoNew.UploadDataToURL;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

public class VideoPlayer extends Activity {
	protected static final String LOGTAG = "ptrackererp";
	private VideoView videoView;
	String fileToUpload="";
	private LayoutInflater controlInflater;
	private Button buttonCancelPicture;
	private Button buttonUploadPicture;
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		 super.onCreate(savedInstanceState);
         this.setContentView(R.layout.videoplayer);
         videoView = (VideoView)this.findViewById(R.id.videoView);
         
         fileToUpload = (String) getIntent().getExtras().getString("fileupload");
         
         videoView.setVideoURI(Uri.parse(fileToUpload));
         //videoView.setFocus();
         
         MediaController mc = new MediaController(this);
         videoView.setMediaController(mc);
         /*
       //init ui buttons
        controlInflater = LayoutInflater.from(getBaseContext());
        View viewControl = controlInflater.inflate(R.layout.controlupload, null);
        LayoutParams layoutParamsControl 
        	= new LayoutParams(LayoutParams.FILL_PARENT, 
        	LayoutParams.FILL_PARENT);
        this.addContentView(viewControl, layoutParamsControl);
        
        buttonCancelPicture = (Button)findViewById(R.id.btnCancelVideo);
        buttonCancelPicture.setOnClickListener(new Button.OnClickListener(){

   			@Override
   			public void onClick(View arg0) 
   			{				
   				NavigateScreen.getInstance().switchDisplay(ListHomeScreen.class);
   			}});
        buttonUploadPicture = (Button)findViewById(R.id.btnUploadVideo);
        buttonUploadPicture.setOnClickListener(new Button.OnClickListener(){

   			@Override
   			public void onClick(View arg0) 
   			{				
   				NavigateScreen.getInstance().switchDisplay(ListHomeScreen.class);
   			}});
          */
	}	
	public boolean onKeyDown(int keyCode, KeyEvent event) {
	    if (keyCode == KeyEvent.KEYCODE_BACK
	            && event.getRepeatCount() == 0) {
	        event.startTracking();
	        return true;
	    }
	    return super.onKeyDown(keyCode, event);
	}

	public boolean onKeyUp(int keyCode, KeyEvent event) {
	    if (keyCode == KeyEvent.KEYCODE_BACK && event.isTracking()
	            && !event.isCanceled()) {
	        // *** Your Code ***
	        return true;
	    }
	    return super.onKeyUp(keyCode, event);
	}
	private String currentTitle="No Title";
	public void createTitleAndUpload()
	{
		AlertDialog.Builder editalert = new AlertDialog.Builder(this);

		editalert.setTitle("Fill Title And Upload");
		editalert.setMessage("Upload file:"+fileToUpload);
		final EditText input = new EditText(this);
		input.setHeight(50);
		input.setText("No Title");
		
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
		        LinearLayout.LayoutParams.FILL_PARENT,
		        LinearLayout.LayoutParams.FILL_PARENT);
		input.setLayoutParams(lp);
		editalert.setView(input);

		editalert.setPositiveButton("Upload", new DialogInterface.OnClickListener() {
			

			public void onClick(DialogInterface dialog, int whichButton) {

		    	currentTitle=input.getText().toString();
		    	callToUpload();
		    }
		});
		editalert.show();
	}
	public void callToUpload()
	{
		String sDataPosition = readLastPastPositionFromDB();// BgThread.getInstance().getDataCurrent();
		//debug = "2";
		if (sDataPosition == null)sDataPosition = "";

		UrlParamEncoder encoder = (new UrlParamEncoder());
		encoder.addParam("id", LocationUtilErp.getInstance().getIMEI());
		encoder.addParam("note", currentTitle);
		encoder.addParam("placeid", "-1");
		encoder.addParam("typeid", "-1");
		encoder.addParam("memberid", MemberUtil.memberid);
		encoder.addParam("data", sDataPosition);
		encoder.addParam("k", SecUtil.getInstance().signData(LocationUtilErp.getInstance().getIMEI()));
		
		final String params = encoder.toString();
		String sUrlToUpload="informvideo.aspx?" + params;
		(new UploadDataToURL()).execute(sUrlToUpload,fileToUpload);
	}	
	protected void processAfterUpload()
	{
		// TODO Auto-generated method stub
		NavigateScreen.getInstance().switchDisplay(ListHomeScreen.class,Intent.FLAG_ACTIVITY_CLEAR_TOP);
	}
	public String readLastPastPositionFromDB() {
	
		return ContextManagerErp.getInstance().readLastPosition();
	}
	public void processResult(String result) 
	{
		AlertDialog.Builder dlgAlert  = new AlertDialog.Builder(NavigateScreen.getInstance().currentActivity);
		dlgAlert.setCancelable(false);	
		
		String msg="Upload thành công";
		if(result.toLowerCase().startsWith("error:"))
		{		
			msg="Upload không thành công?";
			dlgAlert.setPositiveButton("Upload lại",
				    new DialogInterface.OnClickListener() {
				        public void onClick(DialogInterface dialog, int which) {
				        	dialog.dismiss();		
				        	callToUpload();
				        }
				    });
			dlgAlert.setNegativeButton("Cancel",
				    new DialogInterface.OnClickListener() {
				        public void onClick(DialogInterface dialog, int which) 
				        {			           
				        	dialog.dismiss();				        	
				        	processAfterUpload();
				        }
				    });
		}	
		else 
		{	
			try {
				if (true) {
					File file = new File(fileToUpload);
					boolean deleted = file.delete();
				}
			} catch (Exception ex) {}
			
			dlgAlert.setPositiveButton("OK",
				    new DialogInterface.OnClickListener() {
				        public void onClick(DialogInterface dialog, int which) {
				        	processAfterUpload();
				        	dialog.dismiss();	
				        }
				    });	
		}		
		
		dlgAlert.setMessage(msg);
		dlgAlert.setTitle("Upload File...");
		dlgAlert.create().show();
	}
	//network
	class UploadDataToURL extends AsyncTask<String, String, String> {

			@Override
			protected void onPreExecute() {
				super.onPreExecute();
				UIManager.getInstance().showDialog(1);
			}
			//Uri.withAppendedParts(Video.Media.EXTERNAL_CONTENT_URI, Integer.toString(id));
			@Override
			protected String doInBackground(String... f_url) {
				
				String sResult = "Upload Ok";
				try {
					HttpURLConnection connection = null;
					DataOutputStream outputStream = null;
					DataInputStream inputStream = null;

					String fileToUploadCurrent=f_url[1];
					// String pathToOurFile = "/data/file_to_send.mp3";
					String urlServer = HttpData.prefixUrlDataErp + f_url[0];// "http://192.168.1.1/handle_upload.php";
					String lineEnd = "\r\n";
					String twoHyphens = "--";
					String boundary = "*****";

					//System.setProperty("http.keepAlive", "false");
					boolean isConnectedNetWork = ContextManagerErp.getInstance()
							.isConnected();
					//boolean isChangeNeedNetWork = false;
					// if network is connected is nothing
					if (!isConnectedNetWork) {
						ContextManagerErp.getInstance().setMobileDataEnabled(true);
						//isChangeNeedNetWork = true;
					}

					// FileInputStream fileInputStream = new FileInputStream(new
					// File(pathToOurFile));

					URL url = new URL(urlServer);
					connection = (HttpURLConnection) url.openConnection();

					// Allow Inputs & Outputs
					connection.setDoInput(true);
					connection.setDoOutput(true);
					connection.setUseCaches(false);

					// Enable POST method
					connection.setRequestMethod("POST");
					//connection.setReadTimeout(300000);
					connection.setRequestProperty("Connection", "Keep-Alive");
					connection.setRequestProperty("Content-Type",
							"multipart/form-data;boundary=" + boundary);

					outputStream = new DataOutputStream(connection
							.getOutputStream());
					outputStream.writeBytes(twoHyphens + boundary + lineEnd);
					outputStream
							.writeBytes("Content-Disposition: form-data; name=\"uploadedfile\";filename=\""
									+ "FILE.3GP" + "\"" + lineEnd);
					outputStream.writeBytes(lineEnd);

					// Read file to array byte	
					/*
					byte[] imgDataNew;				
					Bitmap photo = BitmapFactory.decodeFile(fileToUploadCurrent);
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					photo.compress(Bitmap.CompressFormat.JPEG, 70, baos);
					imgDataNew = baos.toByteArray();
					*/
					FileInputStream fileInputStreamx = new FileInputStream(new File(fileToUploadCurrent));
					ByteArrayOutputStream bosx = new ByteArrayOutputStream();
					int totalByte=fileInputStreamx.available();
					byte[] imgDataNew = new byte[totalByte];	
					fileInputStreamx.read(imgDataNew, 0, imgDataNew.length);
					//outputStream.write(imgDataNew, 0, imgData.length);
					
					
					byte[] bytes=imgDataNew;
					int bufferLength = 256;
					
		            for (int i = 0; i < bytes.length; i += bufferLength) {
		                int progress = (int)((i / (float) bytes.length) * 100);
		                publishProgress(""+progress,(progress==99?"Đang lưu trên server...":"Uploading..."));
		                if (bytes.length - i >= bufferLength) {
		                    outputStream.write(bytes, i, bufferLength);
		                } else {
		                    outputStream.write(bytes, i, bytes.length - i);
		                }
		            }
		            
					/*
					 * while (bytesRead > 0) { outputStream.write(buffer, 0,
					 * bufferSize); bytesAvailable = fileInputStream.available();
					 * bufferSize = Math.min(bytesAvailable, maxBufferSize);
					 * bytesRead = fileInputStream.read(buffer, 0, bufferSize); }
					 */

					outputStream.writeBytes(lineEnd);
					outputStream.writeBytes(twoHyphens + boundary + twoHyphens+ lineEnd);

					// Responses from the server (code and message)
					int serverResponseCode = connection.getResponseCode();
					String serverResponseMessage = connection.getResponseMessage();

					outputStream.flush();
					outputStream.close();
					
					fileInputStreamx.close();
					// if(isChangeNeedNetWork)
					// ContextManagerErp.getInstance().setMobileDataEnabled(false);

				} catch (Exception e) {
					sResult = "Error:" + e.toString();
				}
				return sResult;
			}
			@Override
			protected void onCancelled() {
			}

			@Override
			protected void onProgressUpdate(String... progress) {
				// setting progress percentage
				// pDialog.setProgress(Integer.parseInt(progress[0]));
				UIManager.getInstance().setProgress(Integer.parseInt(progress[0]));
				UIManager.getInstance().setMessage((progress[1]));
			}

			@Override
			protected void onPostExecute(String result) {
				
				UIManager.getInstance().dismissDialog();
				//UIManager.getInstance().showMsg(result);
				processResult(result);
			}
		}
}