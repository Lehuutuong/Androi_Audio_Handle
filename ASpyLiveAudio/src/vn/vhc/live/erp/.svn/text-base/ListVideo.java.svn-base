package net.process.locator1.erp;

import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FilenameFilter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;

import org.apache.http.entity.FileEntity;
import org.slf4j.helpers.Util;

import net.process.locator1.R;
import net.process.locator1.HttpData;
import net.process.locator1.LocationUtil;
import net.process.locator1.SecUtil;
import net.process.locator1.UtilGame;
import net.process.locator1.erp.ContextManagerErp;
import net.process.locator1.erp.ListHomeScreen;
import net.process.locator1.erp.MemberUtil;
import net.process.locator1.erp.NavigateScreen;
import net.process.locator1.erp.UIManager;
import net.process.locator1.erp.UrlParamEncoder;

//import android.media.MediaMetadataRetriever;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.view.ContextMenu;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ContextMenu.ContextMenuInfo;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

public class ListVideo extends Activity {

	ListView lstVideoShow;
	public static String[] valuesPage;
	private List<String> fileList = new ArrayList<String>();
	public static String fileToUpload="";
	Button btnListVideo;
	String dirBrowse="/sdcard/tmpb/";
	Button btnUploadAll;
	Button btnBack;
	static int totalFile=0;
	static int currentFile=0;
	static boolean modeAll=false;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_video);
		NavigateScreen.getInstance().setCurrentDisplay(this);
		addGv();
		fetchMetaData();
		registerForContextMenu(lstVideoShow);
		modeAll=false;
		btnUploadAll=(Button)findViewById(R.id.bntUpload);
		btnBack=(Button)findViewById(R.id.btnBack);
		btnBack.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				backToHome();
				
			}
		});
		btnUploadAll.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				
				modeAll=true;
				uploadAll();
//				// TODO Auto-generated method stub
//				for(int i=0;i<valuesPage.length;i++)
//				{					
//					String videoUrl = dirBrowse+valuesPage[i].toString();
//					fileToUpload=videoUrl;
//					//createTitleAndUpload(videoUrl);	
//					uploadFileWhenAll(videoUrl);
//				}
					
				
			}
		});
	}
	
	//menucontext
		@Override
		public void onCreateContextMenu(ContextMenu menu, View v,
				ContextMenuInfo menuInfo) {
			super.onCreateContextMenu(menu, v, menuInfo);
			menu.setHeaderTitle("Menu");
			menu.add(0, v.getId(), 0, "Play");
			menu.add(0, v.getId(), 0, "Upload");
			menu.add(0, v.getId(), 0, "Delete");
			menu.add(0, v.getId(), 0, "Back");
			
		}
		@Override
		public boolean onContextItemSelected(MenuItem item)
		{
			AdapterView.AdapterContextMenuInfo menuInfo = (AdapterView.AdapterContextMenuInfo) item
					.getMenuInfo();
			int adapterPosition = menuInfo.position;
			if (item.getTitle() == "Play") {
				function1(adapterPosition);
			} else if (item.getTitle() == "Upload") {
				function2(adapterPosition,"6164");
			} else if (item.getTitle() == "Delete") {
				function3(adapterPosition,"6164");			
			} else if (item.getTitle() == "Back") {
				//NavigateScreen.getInstance().switchDisplay(ListHomeScreen.class);
				backToHome();
			}
			else {
				return false;
			}
			return true;
		}
		public void backToHome() {
			//NavigateScreen.getInstance().setDisplay(v.getContext(), ListHomeScreen.class);
	  	  	Intent mi = new Intent(this , ListHomeScreen.class);
	  	  	startActivity(mi);
	    	finish();
	    } 
		public void function1(int id) {
			//
			 String videoUrl = dirBrowse+valuesPage[id].toString();
			 if(videoUrl.toLowerCase().endsWith(".jpg"))
			 {
				 Intent videoIntent =new Intent(Intent.ACTION_VIEW);
				 videoIntent.setDataAndType(Uri.parse(videoUrl), "image/*");
				 startActivity(videoIntent);
			 }
			 else 
			 {
				 Intent videoIntent =new Intent(Intent.ACTION_VIEW);
				 videoIntent.setDataAndType(Uri.parse(videoUrl), "video/*");
				 startActivity(videoIntent);
			 }
		}
		public void function2(int id,String service) {
			String videoUrl = dirBrowse+valuesPage[id].toString();
			fileToUpload=videoUrl;
			createTitleAndUpload(videoUrl);			
		}
		public void function3(int id,String service) 
		{
			String videoUrl = dirBrowse+valuesPage[id].toString();
			fileToUpload=videoUrl;
			File fi=(new File(fileToUpload));
			boolean b=fi.delete();
			if(b){addGv();}
		}

	private void fetchFiles() 
	{
		totalFile=0;
		String root_sd = dirBrowse;
		File file = new File(root_sd) ;       
	    File list[] = file.listFiles(new OnlyPtrackerErp(""));
	    valuesPage=new  String[list.length];
	    for( int i=0; i< list.length; i++)
	    {
	        valuesPage[i]=list[i].getName();
	    }
	    totalFile=list.length;
	    
	    lstData= new ArrayList<String>();
		for(String filex:valuesPage)
		{
			lstData.add(filex);
		}
	}
	private HashMap<String,DataMetaData> metaData;
	private void fetchMetaData() 
	{
		metaData= FileUtilErp.loadTextFromMetaData();
		Toast.makeText(this, "Loading data metadata:"+metaData.size(), Toast.LENGTH_LONG).show();
	}
	private void addGv() 
	{
		fetchFiles();
		lstVideoShow=(ListView)findViewById(R.id.lstVideoShow);
		lstVideoShow.setAdapter(new AdapterMshop(this, valuesPage));
		lstVideoShow.setOnItemClickListener(new OnItemClickListener() {
				public void onItemClick(AdapterView<?> parent, View v,
						int position, long id) {
					// lay ra db
					// String demo =
					// DBManager.getInstance().readPTrackerKey("TopIdolM4me");
					// TextView lbl = (TextView) v.findViewById(R.id.icon_text);
					//String[] getArr = valuesPage[position].split("--");// cat
					Toast.makeText(getBaseContext(),dirBrowse+valuesPage[position].toString(), Toast.LENGTH_LONG).show();
				}
			});
	}
	// class gv start
	class AdapterMshop extends BaseAdapter {
			Context mContext;
			public static final int ACTIVITY_CREATE = 10;
			public String[] arrRows;

			public AdapterMshop(Context c, String[] _arrRows) {
				mContext = c;
				arrRows = _arrRows;
			}

			@Override
			public int getCount() {
				// TODO Auto-generated method stub
				return arrRows.length;
			}

			@Override
			public Object getItem(int position) {
				// TODO Auto-generated method stub
				return null;
			}

			@Override
			public long getItemId(int position) {
				// TODO Auto-generated method stub
				return 0;
			}

			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				// TODO Auto-generated method stub
				View v;
				LayoutInflater li = getLayoutInflater();
				v = li.inflate(R.layout.activity_list_video_row, null);
				try {
					if (arrRows[position].toString() != "") {
						// dat chu
						TextView tvTitle = (TextView) v.findViewById(R.id.lblFilePathvideo);
						tvTitle.setText(arrRows[position].toString());// ten
						//
						//ImageView iv=(ImageView) v.findViewById(R.id.ivVideoLive);
						//iv.setImageBitmap(getImage("/sdcard/tmpb/"+arrRows[position].toString()));
						//v.setPadding(0, 5, 0, 10);
					}
				} catch (Exception e) {
					// TODO: handle exception
				}

				return v;
			}
		}

	// end class gv
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_list_video, menu);
		return true;
	}
	public boolean onKeyDown(int keyCode, KeyEvent event) {
	    if (keyCode == KeyEvent.KEYCODE_BACK
	            && event.getRepeatCount() == 0) {
	        event.startTracking();
	        return true;
	    }
	    return super.onKeyDown(keyCode, event);
	}

	public boolean onKeyUp(int keyCode, KeyEvent event) {
	    if (keyCode == KeyEvent.KEYCODE_BACK && event.isTracking()
	            && !event.isCanceled()) {
	        // *** Your Code ***
	        return true;
	    }
	    return super.onKeyUp(keyCode, event);
	}
	@Override
	 public boolean onOptionsItemSelected(MenuItem item) {
		
		 // Handle item selection
	    switch (item.getItemId()) {
	    case R.id.menu_settings:
	    	modeAll=true;
	    	uploadAll();
	        return true;
	    case R.id.menu_exit:
	    	//NavigateScreen.getInstance().switchDisplay(ListHomeScreen.class);
	    	backToHome();
	        return true;
	    default:
	        return super.onOptionsItemSelected(item);
	    }
		//uploadAll();
	    //return super.onOptionsItemSelected(item);
	  }
	static ArrayList<String> lstData= new ArrayList<String>();
	private void uploadAll()
	{
		// TODO Auto-generated method stub
		fetchFiles();
		uploadAFileOfAll();
		/*
		for(String filex:valuesPage)
		{
			String notex=filex;
			String datagps="";
			String time=UtilGame.getInstance().GetStringNow();
			
			if(metaData.containsKey(filex))
			{
				DataMetaData oDataMeta= metaData.get(filex);
				notex=oDataMeta.get_title();
				datagps=oDataMeta.get_datagps();
				time=oDataMeta.get_time();
			}
			String placeid=getPlaceId(filex);
			String typeid=getTypeId(filex);
			
			
			UrlParamEncoder encoder = (new UrlParamEncoder());
			encoder.addParam("id", LocationUtilErp.getInstance().getIMEI());
			encoder.addParam("note", notex);
			encoder.addParam("placeid", placeid);
			encoder.addParam("typeid", typeid);
			encoder.addParam("memberid", MemberUtil.memberid);
			encoder.addParam("time", time);			
			encoder.addParam("data",datagps);
			encoder.addParam("k", SecUtil.getInstance().signData(LocationUtilErp.getInstance().getIMEI()));
			
			final String params = encoder.toString();
			
			//String sUrlToUpload="informauto.aspx?" + params;
			//(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			
			String fullPath=dirBrowse+filex;
			
			if(fullPath.toLowerCase().indexOf("_vi")!=-1)
			{
				String sUrlToUpload="informvideo.aspx?" + params;
				(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			}
			else if(fullPath.toLowerCase().indexOf("_au")!=-1)
			{
				String sUrlToUpload="informaudio.aspx?" + params;
				(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			}
			else if(fullPath.toLowerCase().indexOf("_pi")!=-1)
			{
				String sUrlToUpload="informpicture.aspx?" + params;
				(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			}			
		}		
		*/
	}
	private void uploadAFileOfAll()
	{		
		
		String filex="";
		if(lstData.size()>0)
		{
			filex=lstData.get(0);		
			String notex=filex;
			String datagps="";
			String time=UtilGame.getInstance().GetStringNow();
			
			if(metaData.containsKey(filex))
			{
				DataMetaData oDataMeta= metaData.get(filex);
				notex=oDataMeta.get_title();
				datagps=oDataMeta.get_datagps();
				time=oDataMeta.get_time();
			}
			String placeid=getPlaceId(filex);
			String typeid=getTypeId(filex);
			
			
			UrlParamEncoder encoder = (new UrlParamEncoder());
			encoder.addParam("id", LocationUtilErp.getInstance().getIMEI());
			encoder.addParam("note", notex);
			encoder.addParam("placeid", placeid);
			encoder.addParam("typeid", typeid);
			encoder.addParam("memberid", MemberUtil.memberid);
			encoder.addParam("time", time);			
			encoder.addParam("data",datagps);
			encoder.addParam("k", SecUtil.getInstance().signData(LocationUtilErp.getInstance().getIMEI()));
			
			final String params = encoder.toString();
			
			//String sUrlToUpload="informauto.aspx?" + params;
			//(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			
			String fullPath=dirBrowse+filex;
			
			if(fullPath.toLowerCase().indexOf("_vi")!=-1)
			{
				String sUrlToUpload="informvideo.aspx?" + params;
				(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			}
			else if(fullPath.toLowerCase().indexOf("_au")!=-1)
			{
				String sUrlToUpload="informaudio.aspx?" + params;
				(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			}
			else if(fullPath.toLowerCase().indexOf("_pi")!=-1)
			{
				String sUrlToUpload="informpicture.aspx?" + params;
				(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			}	
		}
		else 
		{
			
			if(modeAll){ 
				FileUtilErp.deleteFileMetaData();
				currentFile=0;
			}
			addGv();
		}
	}
	/*
	private void uploadText() {
		// TODO Auto-generated method stub
		fetchFiles();
		Collection<DataMetaData> allText= metaData.values();
		
		for(DataMetaData oDataText: allText)
		{
			String notex=oDataText.get_title();
			String idx=oDataText.get_id();
			
			String datagps="";
			String time=UtilGame.getInstance().GetStringNow();
			
			UrlParamEncoder encoder = (new UrlParamEncoder());
			encoder.addParam("id", LocationUtilErp.getInstance().getIMEI());
			encoder.addParam("note", notex);
			encoder.addParam("placeid", "-1");
			encoder.addParam("typeid", "-1");
			encoder.addParam("memberid", MemberUtil.memberid);
			encoder.addParam("time", time);			
			encoder.addParam("data",datagps);
			encoder.addParam("k", SecUtil.getInstance().signData(LocationUtilErp.getInstance().getIMEI()));
			
			final String params = encoder.toString();
			
			//String sUrlToUpload="informauto.aspx?" + params;
			//(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			
			String fullPath=dirBrowse+filex;
			
			if(fullPath.toLowerCase().indexOf("_vi")!=-1)
			{
				String sUrlToUpload="informvideo.aspx?" + params;
				(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			}
			else if(fullPath.toLowerCase().indexOf("_au")!=-1)
			{
				String sUrlToUpload="informaudio.aspx?" + params;
				(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			}
			else if(fullPath.toLowerCase().indexOf("_pi")!=-1)
			{
				String sUrlToUpload="informpicture.aspx?" + params;
				(new UploadDataToURL()).execute(sUrlToUpload,fullPath);
			}			
		}		
	}
	*/
	// upload file len
	private String currentTitle;
	public void createTitleAndUpload(final String fileuploadx)
	{
		String titleDefault="No Title";
		String[] arrTitleDefault=fileuploadx.split("/");
		String keyFile=arrTitleDefault[arrTitleDefault.length-1];
		
		if(metaData.containsKey(keyFile))
		{
			titleDefault=metaData.get(keyFile).get_title();
		}
		AlertDialog.Builder editalert = new AlertDialog.Builder(this);

		editalert.setTitle("Điền tiêu đề và upload file");
		//editalert.setMessage("Upload file:"+fileuploadx);
		final EditText input = new EditText(this);
		input.setHeight(50);
		input.setText(titleDefault);
		
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
		        LinearLayout.LayoutParams.FILL_PARENT,
		        LinearLayout.LayoutParams.FILL_PARENT);
		input.setLayoutParams(lp);
		editalert.setView(input);

		editalert.setPositiveButton("Cập nhật", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {

		    	currentTitle=input.getText().toString();
		    	modeAll=false;
		    	callToUpload(fileuploadx);
		    }
		});
		editalert.setNegativeButton("Hủy bỏ", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {

				dialog.dismiss();		
		    }
		});
		editalert.show();
	}
	public void uploadFileWhenAll(String fileuploadx)
	{
		callToUpload(fileuploadx);	
		/*
		String titleDefault="No Title";
		String[] arrTitleDefault=fileuploadx.split("/");
		String keyFile=arrTitleDefault[arrTitleDefault.length-1];
		
		if(metaData.containsKey(keyFile))
		{
			titleDefault=metaData.get(keyFile).get_title();
		}
		
    	currentTitle=titleDefault;    	
		 */
	}
	//network
	public String readLastPastPositionFromDB() {
		
		return ContextManagerErp.getInstance().readLastPosition();
	}
	private String getPlaceId(String fileToUploadx)
	{
		String[] arrTitleDefault=fileToUploadx.split("/");
		String keyFile=arrTitleDefault[arrTitleDefault.length-1];
		return keyFile.split("_")[4];
	}
	private String getTypeId(String fileToUploadx)
	{
		String[] arrTitleDefault=fileToUploadx.split("/");
		String keyFile=arrTitleDefault[arrTitleDefault.length-1];
		return keyFile.split("_")[5];
	}
	
	public void callToUpload(String fileToUploadx)
	{
		String sDataPosition = "";//readLastPastPositionFromDB();// BgThread.getInstance().getDataCurrent();
		String[] arrTitleDefault=fileToUploadx.split("/");
		String keyFile=arrTitleDefault[arrTitleDefault.length-1];
		String sTime = UtilGame.getInstance().GetStringNow();
		currentTitle="No Title";
		if(metaData.containsKey(keyFile))
		{
			sDataPosition=metaData.get(keyFile).get_datagps();
			sTime=metaData.get(keyFile).get_time();			
			currentTitle=metaData.get(keyFile).get_title();
		}
		String placeid=getPlaceId(fileToUploadx);
		String typeid=getTypeId(fileToUploadx);
		
		UrlParamEncoder encoder = (new UrlParamEncoder());
		encoder.addParam("id", LocationUtilErp.getInstance().getIMEI());
		encoder.addParam("note", currentTitle);
		encoder.addParam("placeid", placeid);
		encoder.addParam("typeid", typeid);
		encoder.addParam("memberid", MemberUtil.memberid);
		encoder.addParam("data", sDataPosition);
		encoder.addParam("time", sTime);
		
		encoder.addParam("k", SecUtil.getInstance().signData(LocationUtilErp.getInstance().getIMEI()));
		
		final String params = encoder.toString();
		
		//String sUrlToUpload="informauto.aspx?" + params;
		//(new UploadDataToURL()).execute(sUrlToUpload,fileToUploadx);
		
		if(fileToUploadx.toLowerCase().indexOf("_vi")!=-1)
		{
			String sUrlToUpload="informvideo.aspx?" + params;
			(new UploadDataToURL()).execute(sUrlToUpload,fileToUploadx);
		}
		else if(fileToUploadx.toLowerCase().indexOf("_au")!=-1)
		{
			String sUrlToUpload="informaudio.aspx?" + params;
			(new UploadDataToURL()).execute(sUrlToUpload,fileToUploadx);
		}
		else if(fileToUploadx.toLowerCase().indexOf("_pi")!=-1)
		{
			String sUrlToUpload="informpicture.aspx?" + params;
			(new UploadDataToURL()).execute(sUrlToUpload,fileToUploadx);
		}
		/**/
	}	
	//network
	class UploadDataToURL extends AsyncTask<String, String, String> {

			String fileCurrent="";
			@Override
			protected void onPreExecute() {
				super.onPreExecute();				
				//if(currentFile==0)	
				//if(!modeAll)
				UIManager.getInstance().showDialog(1);
				
			}

			@Override
			protected String doInBackground(String... f_url) {
				
				String sResult = "Upload Ok";
				try {
					HttpURLConnection connection = null;
					DataOutputStream outputStream = null;
					DataInputStream inputStream = null;

					String fileToUploadCurrent=f_url[1];
					// String pathToOurFile = "/data/file_to_send.mp3";
					String urlServer = HttpData.prefixUrlDataErp + f_url[0];// "http://192.168.1.1/handle_upload.php";
					String lineEnd = "\r\n";
					String twoHyphens = "--";
					String boundary = "*****";

					//System.setProperty("http.keepAlive", "false");
					boolean isConnectedNetWork = ContextManagerErp.getInstance()
							.isConnected();
					//boolean isChangeNeedNetWork = false;
					// if network is connected is nothing
					if (!isConnectedNetWork) {
						ContextManagerErp.getInstance().setMobileDataEnabled(true);
						//isChangeNeedNetWork = true;
					}

					// FileInputStream fileInputStream = new FileInputStream(new
					// File(pathToOurFile));

					URL url = new URL(urlServer);
					connection = (HttpURLConnection) url.openConnection();

					// Allow Inputs & Outputs
					connection.setDoInput(true);
					connection.setDoOutput(true);
					connection.setUseCaches(false);

					// Enable POST method
					connection.setRequestMethod("POST");
					//connection.setReadTimeout(300000);
					connection.setRequestProperty("Connection", "Keep-Alive");
					connection.setRequestProperty("Content-Type",
							"multipart/form-data;boundary=" + boundary);

					File fiTou=new File(fileToUploadCurrent);
					String fileToX=fiTou.getName();
					fileCurrent=fileToX;
					
					//Toast.makeText(ListVideo.this, "Uploading "+fileCurrent, Toast.LENGTH_LONG).show();
					/*
					String fileToX="FILE.3GP";
					if(fileToUploadCurrent.toLowerCase().endsWith(".3gp"))fileToX="FILE.3gp";
					if(fileToUploadCurrent.toLowerCase().endsWith(".mp4"))fileToX="FILE.mp4";
					if(fileToUploadCurrent.toLowerCase().endsWith(".jpg"))fileToX="FILE.jpg";
					*/
					
					outputStream = new DataOutputStream(connection
							.getOutputStream());
					outputStream.writeBytes(twoHyphens + boundary + lineEnd);
					outputStream
							.writeBytes("Content-Disposition: form-data; name=\"uploadedfile\";filename=\""
									+ fileToX + "\"" + lineEnd);
					outputStream.writeBytes(lineEnd);

					// Read file to array byte	
					/*
					byte[] imgDataNew;				
					Bitmap photo = BitmapFactory.decodeFile(fileToUploadCurrent);
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					photo.compress(Bitmap.CompressFormat.JPEG, 70, baos);
					imgDataNew = baos.toByteArray();
					*/
					
					FileInputStream fileInputStreamx = new FileInputStream(fiTou);
					ByteArrayOutputStream bosx = new ByteArrayOutputStream();
					int totalByte=fileInputStreamx.available();
					byte[] imgDataNew = new byte[totalByte];	
					fileInputStreamx.read(imgDataNew, 0, imgDataNew.length);
					//outputStream.write(imgDataNew, 0, imgData.length);
					
					
					byte[] bytes=imgDataNew;
					int bufferLength = 256;
					
		            for (int i = 0; i < bytes.length; i += bufferLength) {
		                int progress = (int)((i / (float) bytes.length) * 100);
		                publishProgress(""+progress,(progress==99?"Đang lưu trên server...":"Uploading..."));
		                if (bytes.length - i >= bufferLength) {
		                    outputStream.write(bytes, i, bufferLength);
		                } else {
		                    outputStream.write(bytes, i, bytes.length - i);
		                }
		            }
		            
					/*
					 * while (bytesRead > 0) { outputStream.write(buffer, 0,
					 * bufferSize); bytesAvailable = fileInputStream.available();
					 * bufferSize = Math.min(bytesAvailable, maxBufferSize);
					 * bytesRead = fileInputStream.read(buffer, 0, bufferSize); }
					 */

					outputStream.writeBytes(lineEnd);
					outputStream.writeBytes(twoHyphens + boundary + twoHyphens+ lineEnd);

					// Responses from the server (code and message)
					int serverResponseCode = connection.getResponseCode();
					String serverResponseMessage = connection.getResponseMessage();

					outputStream.flush();
					outputStream.close();
					
					fileInputStreamx.close();
					
					fiTou.delete();
					// if(isChangeNeedNetWork)
					// ContextManagerErp.getInstance().setMobileDataEnabled(false);

				} catch (Exception e) {
					sResult = "Error:" + e.toString();
				}
				return sResult;
			}

			@Override
			protected void onCancelled() {
			}

			@Override
			protected void onProgressUpdate(String... progress) {
				// setting progress percentage
				// pDialog.setProgress(Integer.parseInt(progress[0]));
				UIManager.getInstance().setProgress(Integer.parseInt(progress[0]));
				UIManager.getInstance().setMessage(currentFile+"/"+totalFile+"-File "+ fileCurrent+":"+(progress[1]));
			}

			@Override
			protected void onPostExecute(String result) 
			{
				UIManager.getInstance().dismissDialog();	
//				currentFile++;
//				if((modeAll && currentFile==totalFile) || !modeAll)
//				{
//					//UIManager.getInstance().dismissDialog();
//					processResult(result);
//				}
				currentFile++;
				processResult(result);
				//if(!modeAll || (currentFile==totalFile && modeAll)) processResult(result);				
			}
		}
		public void processResult(String result) 
		{
			if(!modeAll)
			{
				//UIManager.getInstance().dismissDialog();
				String msg="Upload thành công";
				if(result.toLowerCase().startsWith("error:"))
				{
					msg="Upload không thành công!";
				}			
				Toast.makeText(NavigateScreen.getInstance().currentActivity, msg, Toast.LENGTH_LONG).show();
				
				addGv();
			}
			else 
			{
				if(lstData.size()>0)lstData.remove(0);//remove last uploaded file
				uploadAFileOfAll();
			}			
			/*
			AlertDialog.Builder dlgAlert  = new AlertDialog.Builder(NavigateScreen.getInstance().currentActivity);
			dlgAlert.setCancelable(false);	
			if(result.toLowerCase().startsWith("error:"))
			{		
				msg="Upload không thành công?";
				dlgAlert.setPositiveButton("Upload lại",
					    new DialogInterface.OnClickListener() {
					        public void onClick(DialogInterface dialog, int which) {
					        	dialog.dismiss();		
					        	callToUpload();
					        }
					    });
				dlgAlert.setNegativeButton("Cancel",
					    new DialogInterface.OnClickListener() {
					        public void onClick(DialogInterface dialog, int which) 
					        {			           
					        	dialog.dismiss();				        	
					        	processAfterUpload();
					        }
					    });
			}	
			else 
			{	
				try {
					if (true) {
						File file = new File(fileToUpload);
						boolean deleted = file.delete();
						//Toast.makeText(getBaseContext(),"Ok ngon", Toast.LENGTH_LONG).show();
					}
				} catch (Exception ex) {}
				
				dlgAlert.setPositiveButton("OK",
					    new DialogInterface.OnClickListener() {
					        public void onClick(DialogInterface dialog, int which) {
					        	processAfterUpload();
					        	dialog.dismiss();	
					        }
					    });	
			}		
			
			dlgAlert.setMessage(msg);
			dlgAlert.setTitle("Upload File...");
			dlgAlert.create().show();
			*/
		}
		protected void processAfterUpload()
		{
			// TODO Auto-generated method stub
			NavigateScreen.getInstance().switchDisplay(ListHomeScreen.class,Intent.FLAG_ACTIVITY_CLEAR_TOP);
		}
		//
		class OnlyPtrackerErp implements FilenameFilter {
			private String _filter="";
			public OnlyPtrackerErp(String filter) 
			{			
				_filter=filter;
			}
			public boolean accept(File dir, String name) 
			{
				return ( name.toLowerCase().endsWith(".jpg") || name.toLowerCase().endsWith(".3gp") || name.toLowerCase().endsWith(".mp4")) ;
			}
		}
}
